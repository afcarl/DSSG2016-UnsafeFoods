import requests
import re
from time import sleep


def getUPC10(upc_list):
    """
    Returns list of the unique 10-digit UPCs from list of UPCs
       
    First find unique UPCs by inserting into a set, and then build a list of
    UPCs that are of length 10
       
    SAMPLE USAGE
    ------------
    
    upc_list = ['030243507998', '3024386680', '3024386681', '3024386687',
    '3024386683', '3024302860'] 
    getUPC10(upc_list)
    """
    upc_10 = []
    upc_set = set(upc_list)
    for u in upc_set:
        if len(u) == 10:
            upc_10.append(u)
    return upc_10


def checkDigit(s):
    """
    Calculates the 12th 'check digit' from the 11 digit UPC ('Number system
    digit' + 10-digit UPC)
    
    (1) Add digits in odd positons
    (2) Multiply result of (1) * 3
    (3) Add digits in even positions
    (4) Add results of (2) and (3)
    (5) Find remainder of (4)
    (6) If (5) is 0, return 0, otherwise return 10 - (5)
    
    SAMPLE USAGE
    ------------
    # check digit is 8
    checkDigit("03024350799")
    """
    even_sum = 0
    odd_sum = 0
    for i in range(len(s)):
        if i % 2 == 0:
            odd_sum += int(s[i])
        else: 
            even_sum += int(s[i])
    remainder = (odd_sum * 3 + even_sum) % 10
    if remainder == 0:
        return 0
    else:
        return 10 - remainder

    
def UPC10to12(s):
    """
    Returns list of possible 12-digit UPCs for a 10-digit UPC given each
    possible 'Number system digit' 

    (No more than one UPC in the list actually exists)

    SAMPLE USAGE
    ------------
    #first element of the returned list '030243507998' is the actual UPC
    UPC10to12("3024350799")
    """
    upc12_possible_list = []
    for num in [0, 1, 6, 7, 8]:
        upc_11 = str(num)+s
        upc_12 = upc_11 + str(checkDigit(upc_11))
        upc12_possible_list.append(upc_12)
    return upc12_possible_list


def getASIN(upc):
    """
    Query UPCtoASIN.com to determine ASIN from UPC.

    If the UPC is not twelve digits, the function will throw a ValueError.
    
    If the UPC is twelve digits, query the website and retrieve ASIN, then wait
    one second (per API rate limit).

    SAMPLE USAGE
    ------------
    getASIN("876063002233")     # 'B001BCH7KM'
    getASIN("8760630022")       # Throws an error
    """
    if len(upc) != 12:
        raise ValueError("UPC must be twelve digits long")
    else:
        url = "http://upctoasin.com/" + upc
        response = requests.get(url)
        sleep(1)                # Sleep for one second
        return(response.text)

    
def searchPossUPCs(upc_list):
    """
    Look for an Amazon ID from a list of possible UPCs.

    For a list of candidate UPCs generated by UPC10to12, loop through and
    search for an Amazon ID (ASIN). If an ASIN is found, the loop ends and the
    ASIN is returned, otherwise the function returns "UPCNOTFOUND".

    This function throws an error if it hits a UPC whose length is not 12.

    SAMPLE USAGE
    ------------
    a = ['076063002237', '176063002234', '676063002239', '776063002236',
         '876063002233']
    searchPossUPCs(a)

    # Throws an error because b[2] is not 12 digits
    b = ['076063002237', '176063002234', '124542', '676063002239',
         '776063002236', '876063002233']
    searchPossUPCs(a)

    """
    res = None
    for code in upc_list:
        if len(code) != 12:
            raise ValueError("UPC must be twelve digits long.")
        else:
            res = getASIN(code)
            if res != "UPCNOTFOUND":
                break
    return(res)


def UPCtoASIN(upc):
    """
    Attempt to find an ASIN for a given UPC.

    First, remove non-numeric characters (like dashes) from the UPC.

    If UPC is ten digits, use Miki's UPC10to12 function to generate possible
    twelve-digit UPCs. Then, run those through searchPossUPCs to find an ASIN
    if one exists.

    If UPC is twelve digits, run through getASIN directly.

    If UPC is neither ten nor twelve digits, return "UPClength-n" where n is
    the number of digits.

    SAMPLE USAGE
    ------------
    print(UPCtoASIN("125483562"))          # UPClength-9
    print(UPCtoASIN("5143549862"))         # UPCNOTFOUND
    print(UPCtoASIN("7606300223"))         # B001BCH7KM
    print(UPCtoASIN("76063-00223"))        # B001BCH7KM
    print(UPCtoASIN("25846132581"))        # UPClength-11
    print(UPCtoASIN("125846523692"))       # UPCNOTFOUND
    print(UPCtoASIN("0-86069-20030-8"))    # B004KT7UQY

    # Loop over multiple UPCs
    upc = ["876063002233", "013000006408", "895296001035", "0-86069-20030-8"]
    for i in upc:
        print(UPCtoASIN(i))
    """
    upc_dig = re.sub("[^0-9]", "", upc)  # Remove non-numeric characters first
    res = None
    if len(upc_dig) == 10:
        upc_12_list = UPC10to12(upc_dig)
        res = searchPossUPCs(upc_12_list)
    elif len(upc_dig) == 12:
        res = getASIN(upc_dig)
    else:
        res = "UPClength-" + str(len(upc_dig))
    return(res)
